package com.example.jaspreet.demo;

import java.io.File;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import com.graphhopper.jsprit.analysis.toolbox.GraphStreamViewer;
import com.graphhopper.jsprit.analysis.toolbox.Plotter;
import com.graphhopper.jsprit.analysis.toolbox.GraphStreamViewer.Label;
import com.graphhopper.jsprit.core.algorithm.VehicleRoutingAlgorithm;
import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
import com.graphhopper.jsprit.core.problem.Location;
import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.FleetSize;
import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingTransportCosts;
import com.graphhopper.jsprit.core.problem.job.Service;
import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl.Builder;
import com.graphhopper.jsprit.core.reporting.SolutionPrinter;
import com.graphhopper.jsprit.core.util.Solutions;
import com.graphhopper.jsprit.core.util.VehicleRoutingTransportCostsMatrix;
import com.graphhopper.jsprit.io.problem.VrpXMLWriter;

/*
Optimum vehicle number
distance and time (together) optimization
capacity
*/
public class CombinedVRP {

    public static void main(String[] args) {
        File dir = new File("output");
        // if the directory does not exist, create it
        if (!dir.exists()) {
            System.out.println("creating directory ./output");
            boolean result = dir.mkdir();
            if (result)
                System.out.println("./output created");
        }

        /*
         * get a vehicle type-builder and build a type with the typeId "vehicleType" and
         * one capacity dimension, i.e. weight, and capacity dimension value of 2
         */
        final int WEIGHT_INDEX = 0;
        // vehicle capacity
        final int WEIGHT_VALUE = 7;
        final int VEHICLE_COUNT = 6;
        final double DEPOT_LATITUDE = -36.7786899;
        final double DEPOT_LONGITUDE = -59.8626802;
        final int CP_COUNT = 30;
        final double[][] DISTANCE_MATRIX = {
                { 0.0, 40.854, 50.309, 86.626, 47.577, 100.37, 65.514, 102.745, 41.66, 0.484, 53.819, 100.16, 98.898,
                        54.361, 31.531, 60.61, 106.629, 156.005, 112.065, 187.75, 52.165, 77.587, 0.478, 152.776,
                        154.959, 154.825, 144.192, 117.024, 139.032, 1.638, 106.124 },
                { 40.922, 0.0, 11.21, 110.532, 24.058, 124.276, 89.42, 126.651, 18.141, 40.578, 14.45, 124.066, 122.804,
                        88.477, 9.248, 100.649, 140.745, 179.911, 135.971, 211.656, 12.774, 117.626, 40.988, 113.677,
                        131.44, 131.306, 184.231, 157.063, 173.148, 42.012, 130.03 },
                { 50.94, 11.448, 0.0, 120.55, 18.192, 134.294, 99.438, 136.669, 18.933, 50.596, 2.53, 134.084, 132.822,
                        98.495, 23.12, 110.667, 150.763, 189.929, 145.989, 221.674, 1.442, 127.644, 51.006, 104.974,
                        125.574, 125.44, 194.249, 167.081, 183.166, 52.03, 140.048 },
                { 86.6, 110.554, 120.009, 0.0, 117.277, 27.606, 131.136, 29.981, 111.36, 86.073, 123.519, 27.396,
                        26.134, 141.21, 101.231, 142.048, 193.478, 155.516, 97.824, 187.261, 121.865, 89.583, 87.172,
                        222.476, 191.146, 224.525, 100.227, 179.577, 225.881, 87.885, 33.36 },
                { 47.439, 23.06, 17.955, 117.049, 0.0, 130.793, 95.937, 133.168, 15.432, 47.095, 14.649, 130.583,
                        129.321, 94.994, 19.619, 107.166, 147.262, 186.428, 142.488, 218.173, 14.42, 124.143, 47.505,
                        120.422, 109.042, 108.908, 190.748, 163.58, 179.665, 48.529, 136.547 },
                { 100.626, 124.58, 134.035, 27.888, 131.303, 0.0, 128.134, 1.911, 125.386, 100.099, 137.545, 1.283,
                        2.989, 155.236, 115.257, 156.074, 207.504, 137.442, 79.75, 169.187, 135.891, 76.067, 101.198,
                        236.502, 173.072, 223.287, 75.99, 166.061, 237.732, 101.911, 19.844 },
                { 65.672, 89.626, 99.081, 131.003, 96.349, 128.281, 0.0, 129.019, 90.432, 65.145, 102.591, 128.103,
                        143.275, 120.282, 80.303, 121.12, 172.55, 92.856, 48.916, 124.601, 100.937, 138.097, 66.244,
                        201.548, 128.486, 178.701, 191.11, 177.534, 204.953, 66.957, 150.501 },
                { 102.624, 126.578, 136.033, 29.886, 133.301, 1.8, 128.823, 0.0, 127.384, 102.097, 139.543, 2.577,
                        4.062, 157.234, 117.255, 158.072, 209.502, 138.131, 80.439, 169.876, 137.889, 78.065, 103.196,
                        238.5, 173.761, 223.976, 76.396, 168.059, 239.73, 103.909, 21.842 },
                { 41.616, 19.327, 18.369, 111.226, 15.637, 124.97, 90.114, 127.345, 0.0, 41.272, 21.879, 124.76,
                        123.498, 89.171, 13.796, 101.343, 141.439, 180.605, 136.665, 212.35, 20.225, 118.32, 41.682,
                        120.836, 123.019, 122.885, 184.925, 157.757, 173.842, 42.706, 130.724 },
                { 0.75, 40.593, 50.048, 86.143, 47.316, 99.887, 65.031, 102.262, 41.399, 0.0, 53.558, 99.677, 98.415,
                        54.1, 31.27, 60.937, 106.368, 155.522, 111.582, 187.267, 51.904, 77.914, 0.816, 152.515,
                        154.698, 154.564, 144.519, 117.351, 138.771, 1.982, 105.641 },
                { 53.907, 14.854, 3.538, 123.517, 15.003, 137.261, 102.405, 139.636, 21.9, 53.563, 0.0, 137.051,
                        135.789, 101.462, 26.087, 113.634, 153.73, 192.896, 148.956, 224.641, 1.611, 130.611, 53.973,
                        105.65, 122.385, 122.251, 197.216, 170.048, 186.133, 54.997, 143.015 },
                { 98.985, 122.939, 132.394, 26.247, 129.662, 1.254, 127.958, 2.906, 123.745, 98.458, 135.904, 0.0,
                        2.782, 153.595, 113.616, 154.433, 205.863, 137.266, 79.574, 169.011, 134.25, 74.426, 99.557,
                        234.861, 172.896, 223.111, 76.875, 164.42, 236.091, 100.27, 18.203 },
                { 98.925, 122.879, 132.334, 26.187, 129.602, 2.727, 143.461, 4.394, 123.685, 98.398, 135.844, 2.517,
                        0.0, 153.535, 113.556, 154.373, 205.803, 142.964, 85.272, 174.709, 134.19, 74.366, 99.497,
                        234.801, 178.594, 228.809, 74.64, 164.36, 236.031, 100.21, 18.143 },
                { 54.272, 88.242, 97.697, 141.384, 94.965, 155.128, 120.272, 157.503, 89.048, 53.928, 101.207, 154.918,
                        153.656, 0.0, 78.919, 55.872, 55.125, 210.763, 166.823, 242.508, 99.553, 131.931, 54.338,
                        174.013, 202.347, 202.213, 198.536, 156.325, 87.528, 53.713, 160.882 },
                { 31.557, 9.83, 22.485, 101.167, 19.753, 114.911, 80.055, 117.286, 13.836, 31.213, 25.995, 114.701,
                        113.439, 79.112, 0.0, 91.284, 131.38, 170.546, 126.606, 202.291, 24.341, 108.261, 31.623,
                        124.952, 127.135, 127.001, 174.866, 147.698, 163.783, 32.647, 120.665 },
                { 60.721, 100.33, 109.785, 142.024, 107.053, 155.768, 120.912, 158.143, 101.136, 60.779, 113.295,
                        155.558, 154.296, 55.84, 91.007, 0.0, 105.596, 211.403, 167.463, 243.148, 111.641, 61.098,
                        60.383, 212.252, 214.435, 214.301, 131.349, 59.83, 131.501, 61.096, 117.07 },
                { 106.46, 140.43, 149.885, 193.572, 147.153, 207.316, 172.46, 209.691, 141.236, 106.116, 153.395,
                        207.106, 205.844, 54.787, 131.107, 105.29, 0.0, 262.951, 219.011, 294.696, 151.741, 184.119,
                        106.526, 119.067, 254.535, 254.401, 250.724, 125.66, 56.863, 105.901, 213.07 },
                { 156.021, 179.975, 189.43, 155.457, 186.698, 137.03, 92.729, 137.768, 180.781, 155.494, 192.94,
                        136.852, 142.322, 210.631, 170.652, 211.469, 262.899, 0.0, 57.665, 36.549, 191.286, 205.771,
                        156.593, 291.897, 137.667, 187.882, 199.859, 267.883, 295.302, 157.306, 149.548 },
                { 109.748, 133.702, 143.157, 98.115, 140.425, 79.688, 46.456, 80.426, 134.508, 109.221, 146.667, 79.51,
                        84.98, 164.358, 124.379, 165.196, 216.626, 58.009, 0.0, 89.754, 145.013, 148.429, 110.32,
                        245.624, 93.639, 143.854, 142.517, 221.61, 249.029, 111.033, 92.206 },
                { 188.046, 212.0, 221.455, 187.482, 218.723, 169.055, 124.754, 169.793, 212.806, 187.519, 224.965,
                        168.877, 174.347, 242.656, 202.677, 243.494, 294.924, 36.56, 89.69, 0.0, 223.311, 237.796,
                        188.618, 323.922, 169.692, 219.907, 231.884, 299.908, 327.327, 189.331, 181.573 },
                { 52.019, 12.527, 1.503, 121.629, 19.271, 135.373, 100.517, 137.748, 20.012, 51.675, 1.471, 135.163,
                        133.901, 99.574, 24.199, 111.746, 151.842, 191.008, 147.068, 222.753, 0.0, 128.723, 52.085,
                        105.867, 126.653, 126.519, 195.328, 168.16, 184.245, 53.109, 141.127 },
                { 78.345, 117.954, 127.409, 89.062, 124.677, 76.393, 138.536, 78.768, 118.76, 78.403, 130.919, 76.183,
                        74.921, 132.451, 108.631, 61.673, 184.719, 205.839, 148.147, 237.584, 129.265, 0.0, 78.007,
                        229.876, 232.059, 231.925, 70.269, 91.344, 163.015, 78.72, 55.99 },
                { 0.335, 40.78, 50.235, 86.962, 47.503, 100.706, 65.85, 103.081, 41.586, 0.815, 53.745, 100.496, 99.234,
                        54.287, 31.457, 60.939, 106.555, 156.341, 112.401, 188.086, 52.091, 77.916, 0.0, 152.702,
                        154.885, 154.751, 144.521, 117.353, 138.958, 1.157, 106.46 },
                { 154.095, 115.042, 105.821, 223.705, 121.347, 237.449, 202.593, 239.824, 122.088, 153.751, 107.304,
                        237.239, 235.977, 173.494, 126.275, 213.822, 119.11, 293.084, 249.144, 324.829, 106.871,
                        230.799, 154.161, 0.0, 223.799, 166.349, 297.404, 223.797, 146.017, 155.185, 243.203 },
                { 155.264, 130.885, 125.78, 191.736, 109.08, 173.309, 129.008, 174.047, 123.257, 154.92, 122.474,
                        173.131, 178.601, 202.819, 127.444, 214.991, 255.087, 137.884, 93.944, 169.629, 122.245,
                        231.968, 155.33, 224.202, 0.0, 59.54, 236.138, 271.405, 287.49, 156.354, 185.827 },
                { 154.786, 130.407, 125.302, 224.396, 108.602, 223.03, 178.729, 223.768, 122.779, 154.442, 121.996,
                        222.852, 228.322, 202.341, 126.966, 214.513, 254.609, 187.605, 143.665, 219.35, 121.767, 231.49,
                        154.852, 166.6, 58.934, 0.0, 285.859, 270.927, 287.012, 155.876, 235.548 },
                { 144.982, 184.591, 194.046, 101.112, 191.314, 77.239, 191.903, 77.631, 185.397, 145.04, 197.556,
                        77.442, 75.288, 199.088, 175.268, 131.798, 251.356, 201.211, 143.519, 232.956, 195.902, 70.731,
                        144.644, 296.513, 236.841, 287.056, 0.0, 160.725, 232.396, 145.357, 101.265 },
                { 116.525, 156.134, 165.589, 178.67, 162.857, 166.001, 176.716, 168.376, 156.94, 116.583, 169.099,
                        165.791, 164.529, 156.688, 146.811, 59.164, 126.151, 267.207, 223.267, 298.952, 167.445, 90.926,
                        116.187, 224.402, 270.239, 270.105, 159.877, 0.0, 80.211, 116.9, 145.598 },
                { 139.227, 173.197, 182.652, 226.339, 179.92, 238.464, 205.227, 240.839, 174.003, 138.883, 186.162,
                        238.254, 236.992, 87.554, 163.874, 131.627, 57.017, 295.718, 251.778, 327.463, 184.508, 163.389,
                        139.293, 146.012, 287.302, 287.168, 232.34, 80.294, 0.0, 138.668, 218.061 },
                { 1.293, 41.727, 51.182, 87.888, 48.45, 101.632, 66.776, 104.007, 42.533, 1.775, 54.692, 101.422,
                        100.16, 55.234, 32.404, 60.113, 107.502, 157.267, 113.327, 189.012, 53.038, 77.09, 1.368,
                        153.649, 155.832, 155.698, 143.695, 116.527, 139.905, 0.0, 107.386 },
                { 105.809, 129.763, 139.218, 33.071, 136.486, 20.402, 150.345, 22.777, 130.569, 105.282, 142.728,
                        20.192, 18.93, 160.419, 120.44, 117.289, 212.687, 149.848, 92.156, 181.593, 141.074, 56.222,
                        106.381, 241.685, 185.478, 235.693, 100.645, 146.216, 217.887, 107.094, 0.0 }
        };
        final double[][] TIME_MATRIX = {
                { 0.0, 43.2833, 48.1667, 62.1, 46.8, 78.2333, 51.7, 85.45, 40.3, 3.6167, 55.9, 78.1833, 73.2833,
                        48.8833, 33.65, 51.9667, 79.1, 104.3833, 81.4667, 124.1333, 54.5667, 63.25, 3.1833, 107.5833,
                        111.2667, 112.3, 104.4, 86.5167, 103.55, 8.0833, 76.7 },
                { 43.9333, 0.0, 18.75, 73.6833, 28.5667, 89.8, 63.2833, 97.1, 22.2667, 42.1833, 27.2333, 89.7667,
                        84.8833, 71.7, 15.6667, 79.5333, 101.9333, 115.9667, 93.1, 135.7333, 24.25, 90.8333, 44.3,
                        78.0333, 93.1, 94.05, 131.9167, 114.0833, 126.3333, 46.6667, 88.3667 },
                { 48.5333, 19.3667, 0.0, 78.2167, 23.9667, 94.3333, 67.8333, 101.6833, 21.75, 46.7167, 10.45, 94.3667,
                        89.4167, 76.25, 23.6833, 84.1833, 106.45, 120.5167, 97.65, 140.2667, 7.4167, 95.4, 48.8833,
                        70.1833, 88.5, 89.45, 136.3833, 118.7667, 130.85, 51.2167, 92.9167 },
                { 66.4667, 74.3667, 79.2667, 0.0, 77.8833, 29.9667, 80.4167, 36.7167, 71.4, 64.3333, 86.9667, 29.8333,
                        25.0833, 95.0167, 64.5333, 96.4333, 125.2, 105.05, 68.0833, 124.8, 85.7, 67.6333, 64.4167,
                        138.2333, 125.4167, 143.35, 81.0, 128.9833, 149.55, 66.4833, 28.4667 },
                { 44.9833, 29.7, 22.5167, 74.7333, 0.0, 90.85, 64.3333, 98.15, 18.2333, 43.2333, 25.5667, 90.8167,
                        85.9333, 72.7667, 20.2333, 80.6333, 102.9667, 117.0167, 94.15, 136.7833, 25.75, 91.9333,
                        45.3667, 81.7833, 70.9, 71.8167, 133.0333, 115.3, 127.3667, 47.7167, 89.4167 },
                { 83.7167, 91.6, 96.5, 32.0667, 95.1333, 0.0, 95.9333, 9.0167, 88.6333, 81.5667, 104.2, 7.2, 11.1333,
                        112.2333, 81.7667, 114.0167, 142.3333, 101.4833, 64.5167, 121.25, 102.95, 66.6833, 81.7667,
                        155.2833, 121.8667, 150.3667, 64.9167, 128.05, 172.9667, 83.9, 27.5333 },
                { 55.3833, 63.35, 68.25, 79.3333, 66.8667, 93.1333, 0.0, 96.35, 60.3667, 53.25, 75.9333, 93.6833, 90.65,
                        83.95, 53.5167, 85.3, 114.1667, 59.9333, 37.05, 79.7, 74.6833, 96.5167, 53.2667, 127.5, 80.3667,
                        108.9, 125.9, 119.8833, 138.55, 55.4, 94.15 },
                { 88.7333, 96.6, 101.5, 37.05, 100.1333, 10.0167, 98.95, 0.0, 93.6333, 86.5667, 109.1667, 14.0667,
                        14.55, 117.2333, 86.7667, 119.0167, 147.3167, 104.5, 67.5333, 124.2667, 107.95, 71.6833,
                        86.8167, 160.2833, 124.8667, 153.3833, 67.75, 133.0333, 177.9667, 88.95, 32.5167 },
                { 37.9167, 20.6, 20.1333, 67.6667, 18.7833, 83.7833, 57.2667, 91.0833, 0.0, 36.1667, 27.8667, 83.7333,
                        78.85, 65.5333, 13.05, 73.5167, 95.75, 109.95, 87.0833, 129.7167, 26.3833, 84.8167, 38.2833,
                        79.4, 83.3167, 84.2667, 125.9, 108.0667, 120.15, 40.6333, 82.3833 },
                { 4.0667, 41.95, 46.85, 59.1, 45.4833, 75.2333, 48.7, 82.3167, 38.9667, 0.0, 54.5667, 75.1833, 70.2833,
                        47.5667, 32.3333, 51.6, 77.7667, 101.3667, 78.4667, 121.1333, 53.2333, 62.8167, 4.4167, 106.25,
                        109.95, 110.9833, 104.05, 86.0667, 102.2167, 9.3, 73.7 },
                { 53.45, 25.8833, 11.6833, 83.0167, 26.9667, 99.1333, 72.6167, 106.55, 26.5333, 51.6, 0.0, 99.15, 94.2,
                        81.1167, 28.4833, 88.9667, 111.3333, 125.3, 102.4333, 145.0667, 6.1833, 100.1833, 53.8167,
                        71.1833, 91.4833, 92.45, 141.1833, 123.55, 135.7167, 56.0833, 97.7 },
                { 80.4667, 88.35, 93.25, 28.8833, 91.8833, 6.3333, 95.05, 14.1667, 85.3833, 78.3167, 100.95, 0.0, 10.65,
                        109.0167, 78.5167, 110.65, 139.15, 100.6, 63.6333, 120.3667, 99.7, 63.45, 78.5167, 152.0333,
                        120.9833, 149.4667, 66.4167, 124.9333, 169.9333, 80.6167, 24.3167 },
                { 77.0167, 84.8667, 89.7667, 25.4, 88.4, 10.1833, 90.9167, 14.6333, 81.8833, 74.8833, 97.45, 9.9833,
                        0.0, 105.5167, 75.0333, 107.1333, 135.65, 100.7833, 63.8167, 120.5333, 96.2, 59.95, 75.0333,
                        148.5333, 121.15, 149.65, 59.2, 121.4333, 166.4333, 77.1167, 20.8333 },
                { 47.8333, 67.9167, 72.8, 90.9167, 71.4167, 107.0167, 80.75, 114.4833, 64.9333, 46.0167, 80.5, 107.05,
                        102.0833, 0.0, 58.3, 66.75, 42.8, 133.2, 110.3, 152.95, 79.2333, 102.0667, 48.1833, 120.2667,
                        135.8667, 136.8833, 143.0667, 105.7833, 67.2167, 47.2, 105.4667 },
                { 31.5667, 15.1333, 20.6333, 61.3667, 19.3, 77.5, 50.9667, 84.7167, 12.7833, 29.8, 28.3667, 77.45,
                        72.55, 59.1333, 0.0, 67.2167, 89.4167, 103.65, 80.7667, 123.4, 26.8833, 78.5167, 31.9333, 79.9,
                        83.8333, 84.7833, 119.6167, 101.7833, 113.8167, 34.25, 76.0833 },
                { 50.3167, 74.8833, 79.7833, 91.3333, 78.4, 107.45, 80.9333, 114.9, 71.9167, 49.8333, 87.4833, 107.4667,
                        102.5, 68.6167, 65.05, 0.0, 98.3333, 133.6167, 110.7333, 153.3833, 86.2167, 61.6, 48.2167,
                        138.7667, 142.8333, 143.8667, 111.9333, 48.4333, 94.1667, 50.3, 102.5667 },
                { 78.8, 98.8333, 103.75, 121.8333, 102.3667, 137.9, 111.6833, 145.35, 95.8667, 76.9333, 111.4167,
                        137.7833, 132.95, 41.3167, 89.25, 95.9833, 0.0, 164.0667, 141.2333, 183.8333, 110.2, 132.9833,
                        79.1667, 80.9167, 166.75, 167.7167, 173.8167, 87.8, 49.2167, 78.1, 136.3167 },
                { 108.3833, 116.15, 121.0333, 106.5333, 119.6333, 100.4333, 61.1333, 103.5667, 113.1667, 106.1333,
                        128.7, 100.9833, 100.5, 136.75, 106.3, 138.75, 166.75, 0.0, 44.3167, 33.3, 127.4667, 142.9,
                        106.4667, 179.45, 88.2333, 116.75, 133.1333, 173.1833, 190.9, 108.5833, 103.8667 },
                { 83.9333, 91.8, 96.7, 69.35, 95.3333, 63.1167, 36.5667, 66.2167, 88.8333, 81.7667, 104.4, 63.5833,
                        63.2833, 112.4333, 81.9667, 114.2167, 142.5333, 44.5833, 0.0, 64.35, 103.15, 105.8333, 81.9667,
                        155.4833, 65.0167, 93.55, 95.9833, 148.7167, 166.75, 84.1, 66.6833 },
                { 128.6333, 136.4667, 141.3667, 126.8, 139.9, 120.6833, 81.4667, 123.95, 133.4833, 126.3667, 149.0,
                        121.2333, 120.75, 156.9, 126.6167, 159.15, 186.8833, 33.3833, 64.6833, 0.0, 147.7333, 163.1167,
                        126.7667, 199.65, 108.5333, 137.05, 153.4167, 193.6167, 211.0833, 128.8833, 124.1 },
                { 52.05, 22.8167, 7.2667, 81.6833, 27.4167, 97.8, 71.3, 105.15, 25.1833, 50.1833, 6.5167, 97.8333,
                        92.8667, 79.7167, 27.1333, 87.65, 109.9167, 123.9833, 101.1, 143.7333, 0.0, 98.8667, 52.4167,
                        72.8667, 91.95, 92.9, 139.8667, 122.2333, 134.3167, 54.6667, 96.3667 },
                { 65.6167, 90.15, 95.05, 65.6333, 93.6833, 64.1333, 96.2, 71.2167, 87.1833, 65.1167, 102.75, 64.0667,
                        59.1667, 103.5667, 80.3167, 64.4, 133.7, 140.95, 104.0667, 160.7167, 101.4833, 0.0, 63.5333,
                        153.8333, 158.05, 159.1167, 56.8833, 66.9167, 112.8667, 65.6, 44.3167 },
                { 2.3, 42.8, 47.6833, 63.3167, 46.3167, 79.45, 52.9167, 86.6667, 39.8167, 4.9333, 55.4167, 79.4, 74.5,
                        48.4, 33.1667, 52.2167, 78.6167, 105.6, 82.6833, 125.35, 54.0833, 63.5, 0.0, 107.0833, 110.7833,
                        111.8167, 104.65, 86.7667, 103.0667, 5.1333, 77.9167 },
                { 107.1, 79.1167, 67.6167, 136.4833, 82.1833, 152.45, 126.0833, 159.8667, 80.0, 105.15, 72.4667,
                        152.3667, 147.5333, 118.8833, 81.95, 143.1333, 80.6833, 178.6667, 155.9, 198.45, 73.0167,
                        153.7333, 107.4667, 0.0, 146.8667, 110.8667, 194.5167, 143.7, 96.7167, 109.7, 151.0 },
                { 112.9, 97.2, 90.1, 127.2167, 72.1667, 121.1, 81.8833, 124.35, 85.8167, 110.95, 93.2333, 121.6333,
                        121.15, 140.3667, 87.8167, 148.9333, 170.3833, 87.9667, 65.0833, 108.55, 93.6833, 159.5333,
                        113.25, 152.35, 0.0, 47.35, 153.8333, 183.3667, 194.5333, 115.5333, 124.5167 },
                { 110.8, 95.2, 88.1, 140.3333, 70.3, 147.9833, 109.0, 151.2833, 83.9333, 108.85, 91.3167, 148.4, 148.05,
                        138.2667, 85.95, 146.8, 168.2833, 115.1833, 92.25, 134.9333, 91.8167, 157.4, 111.15, 113.8833,
                        43.3833, 0.0, 180.7167, 181.2167, 192.4333, 113.4, 151.4 },
                { 106.6167, 130.7667, 135.65, 81.7667, 134.2, 67.1667, 128.5667, 69.3333, 127.7833, 105.8, 143.2833,
                        66.8167, 59.3167, 143.9833, 120.9167, 114.8833, 173.95, 134.1833, 97.2833, 153.9333, 142.0167,
                        55.6833, 104.4667, 193.95, 154.5167, 182.9333, 0.0, 117.1667, 162.1833, 106.5833, 74.1667 },
                { 87.65, 111.8833, 116.7667, 124.7, 115.3667, 123.2, 117.95, 130.6333, 108.9, 86.9333, 124.4333, 123.2,
                        118.2333, 105.2, 102.0167, 47.8833, 88.95, 170.5167, 147.75, 190.3, 123.2, 65.8833, 85.4833,
                        144.15, 179.7, 180.6667, 114.8, 0.0, 62.9, 87.6167, 105.4333 },
                { 102.8833, 122.8, 127.7, 145.8167, 126.2833, 168.5667, 135.65, 175.8667, 119.8167, 100.95, 135.3667,
                        168.4833, 163.7167, 64.6167, 113.1833, 94.0833, 48.3333, 187.95, 165.2, 207.75, 134.1333,
                        111.5333, 103.25, 94.7333, 190.6, 191.5833, 160.1667, 64.7, 0.0, 102.0833, 151.0667 },
                { 6.8, 46.55, 51.45, 64.45, 50.1, 80.55, 54.05, 87.8, 43.5667, 8.6167, 59.1667, 80.5167, 75.6333,
                        52.1833, 36.9333, 50.4, 82.4667, 106.7333, 83.8167, 126.4833, 57.8333, 61.6167, 6.5, 110.85,
                        114.55, 115.5833, 102.8333, 84.95, 106.8833, 0.0, 79.05 },
                { 79.0167, 86.8667, 91.7667, 27.3833, 90.4, 25.8333, 92.9167, 32.5667, 83.9, 76.8667, 99.4667, 25.6833,
                        20.9333, 107.5167, 77.0333, 101.0333, 137.65, 102.7667, 65.8, 122.5167, 98.2167, 41.8167,
                        77.0333, 150.55, 123.1333, 151.6333, 71.8833, 103.3667, 148.8667, 79.15, 0.0 }
        };
        final double[][] LOCATIONS = {
                { -36.83789, -60.22154 },
                { -36.8854011, -60.3117682 },
                { -37.2811, -59.36174 },
                { -36.9830847, -60.2786874 },
                { -37.3153825, -59.1358714 },
                { -37.310964, -59.9849222 },
                { -37.326989, -59.1347328 },
                { -36.93131, -60.1600396 },
                { -36.7818291, -59.8653433 },
                { -36.8902699, -60.3316318 },
                { -37.3087394, -59.1410418 },
                { -37.3052097, -59.1212296 },
                { -36.35624, -60.0239248 },
                { -36.8656099, -60.15751 },
                { -36.3777766, -59.5056733 },
                { -36.0213728, -60.0150616 },
                { -38.0330697, -60.0992996 },
                { -37.6745799, -59.8033973 },
                { -37.96412, -60.41475 },
                { -36.8917009, -60.3213956 },
                { -36.7740099, -59.08785 },
                { -36.777105, -59.863055 },
                { -36.2313297, -61.1130004 },
                { -37.5443336, -60.799877 },
                { -37.248281, -61.2612062 },
                { -37.1512197, -58.4878396 },
                { -36.01598, -59.09886 },
                { -35.6388321, -59.7805788 },
                { -36.7704241, -59.8596 },
                { -37.20978, -59.07611 }
        };

        final List<Location> locationList = new ArrayList<>();
        locationList.add(Location.newInstance(DEPOT_LATITUDE, DEPOT_LONGITUDE));
        for (double[] loc : LOCATIONS) {
            locationList.add(Location.newInstance(loc[0], loc[1]));
        }

        VehicleTypeImpl.Builder vehicleTypeBuilder = VehicleTypeImpl.Builder.newInstance("vehicleType")
                .addCapacityDimension(WEIGHT_INDEX, WEIGHT_VALUE);
        VehicleType vehicleType = vehicleTypeBuilder.build();

        /*
         * get a vehicle-builder and build a vehicle located at (10,10) with type
         * "vehicleType"
         */
        VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
        List<VehicleImpl> vehicles = new ArrayList<>();

        for (int i = 0; i < VEHICLE_COUNT; i++) {

            Builder vehicleBuilder = VehicleImpl.Builder.newInstance("vehicle" + i);
            vehicleBuilder.setStartLocation(locationList.get(0));
            vehicleBuilder.setType(vehicleType);
            VehicleImpl vehicle = vehicleBuilder.build();
            vehicles.add(vehicle);
        }
        vrpBuilder.addAllVehicles(vehicles);

        /*
         * build services at the required locations, each with a capacity-demand of 1.
         */
        List<Service> services = new ArrayList<>();
        for (int i = 0; i < CP_COUNT; i++) {
            Service service = Service.Builder.newInstance(String.valueOf(i + 1)).addSizeDimension(WEIGHT_INDEX, 1)
                    .setLocation(locationList.get(i + 1)).addTimeWindow(60, 360).setServiceTime(30).build();
            services.add(service);
        }

        VehicleRoutingTransportCostsMatrix.Builder costMatrixBuilder = VehicleRoutingTransportCostsMatrix.Builder
                .newInstance(true);
        for (int i = 0; i < DISTANCE_MATRIX.length; i++) {
            for (int j = 0; j < i; j++) {
                if (i == j)
                    continue;
                costMatrixBuilder.addTransportDistance(locationList.get(i).getId(), locationList.get(j).getId(),
                        DISTANCE_MATRIX[i][j]);
                costMatrixBuilder.addTransportTime(locationList.get(i).getId(), locationList.get(j).getId(),
                        TIME_MATRIX[i][j]);
            }
        }

        VehicleRoutingTransportCosts costMatrix = costMatrixBuilder.build();

        vrpBuilder.addAllJobs(services);
        vrpBuilder.setFleetSize(FleetSize.FINITE);
        vrpBuilder.setRoutingCost(costMatrix);

        VehicleRoutingProblem problem = vrpBuilder.build();

        /*
         * get the algorithm out-of-the-box.
         */
        VehicleRoutingAlgorithm algorithm = Jsprit.createAlgorithm(problem);

        /*
         * and search a solution
         */
        Collection<VehicleRoutingProblemSolution> solutions = algorithm.searchSolutions();

        /*
         * get the best
         */
        VehicleRoutingProblemSolution bestSolution = Solutions.bestOf(solutions);

        new VrpXMLWriter(problem, solutions).write("output/problem-with-solution.xml");

        SolutionPrinter.print(problem, bestSolution, SolutionPrinter.Print.VERBOSE);

        /*
         * plot
         */
        new Plotter(problem, bestSolution).plot("output/plot.png", "simple example");

        /*
         * render problem and solution with GraphStream
         */
        new GraphStreamViewer(problem, bestSolution).labelWith(Label.ID).setRenderDelay(200).display();
    }
}
